/* This file was generated by SableCC (http://www.sablecc.org/). */

package dcd.highlevel.rdcd.parser.analysis;

import java.util.*;
import dcd.highlevel.rdcd.parser.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    public void caseAGoal(AGoal node)
    {
        defaultCase(node);
    }

    public void caseAIntegerLiteralLiteral(AIntegerLiteralLiteral node)
    {
        defaultCase(node);
    }

    public void caseABooleanLiteralLiteral(ABooleanLiteralLiteral node)
    {
        defaultCase(node);
    }

    public void caseATrueBooleanLiteral(ATrueBooleanLiteral node)
    {
        defaultCase(node);
    }

    public void caseAFalseBooleanLiteral(AFalseBooleanLiteral node)
    {
        defaultCase(node);
    }

    public void caseADecimalIntegerLiteral(ADecimalIntegerLiteral node)
    {
        defaultCase(node);
    }

    public void caseAHexIntegerLiteral(AHexIntegerLiteral node)
    {
        defaultCase(node);
    }

    public void caseAOctalIntegerLiteral(AOctalIntegerLiteral node)
    {
        defaultCase(node);
    }

    public void caseASimpleNameName(ASimpleNameName node)
    {
        defaultCase(node);
    }

    public void caseASimpleName(ASimpleName node)
    {
        defaultCase(node);
    }

    public void caseACompilationUnit(ACompilationUnit node)
    {
        defaultCase(node);
    }

    public void caseADeploymentSpec(ADeploymentSpec node)
    {
        defaultCase(node);
    }

    public void caseARoleDeclaration(ARoleDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAAbstractConstant(AAbstractConstant node)
    {
        defaultCase(node);
    }

    public void caseAConcreteIntConstant(AConcreteIntConstant node)
    {
        defaultCase(node);
    }

    public void caseAConcreteNameConstant(AConcreteNameConstant node)
    {
        defaultCase(node);
    }

    public void caseAInvariant(AInvariant node)
    {
        defaultCase(node);
    }

    public void caseAVariableExp(AVariableExp node)
    {
        defaultCase(node);
    }

    public void caseABinexpExp(ABinexpExp node)
    {
        defaultCase(node);
    }

    public void caseAAdditionBinaryExp(AAdditionBinaryExp node)
    {
        defaultCase(node);
    }

    public void caseAEqualityBinaryExp(AEqualityBinaryExp node)
    {
        defaultCase(node);
    }

    public void caseALessThanBinaryExp(ALessThanBinaryExp node)
    {
        defaultCase(node);
    }

    public void caseAGreaterThanBinaryExp(AGreaterThanBinaryExp node)
    {
        defaultCase(node);
    }

    public void caseTWhiteSpace(TWhiteSpace node)
    {
        defaultCase(node);
    }

    public void caseTTraditionalComment(TTraditionalComment node)
    {
        defaultCase(node);
    }

    public void caseTDocumentationComment(TDocumentationComment node)
    {
        defaultCase(node);
    }

    public void caseTEndOfLineComment(TEndOfLineComment node)
    {
        defaultCase(node);
    }

    public void caseTAbstract(TAbstract node)
    {
        defaultCase(node);
    }

    public void caseTIf(TIf node)
    {
        defaultCase(node);
    }

    public void caseTRole(TRole node)
    {
        defaultCase(node);
    }

    public void caseTEvent(TEvent node)
    {
        defaultCase(node);
    }

    public void caseTExtends(TExtends node)
    {
        defaultCase(node);
    }

    public void caseTDeployment(TDeployment node)
    {
        defaultCase(node);
    }

    public void caseTTrue(TTrue node)
    {
        defaultCase(node);
    }

    public void caseTFalse(TFalse node)
    {
        defaultCase(node);
    }

    public void caseTLParenthese(TLParenthese node)
    {
        defaultCase(node);
    }

    public void caseTRParenthese(TRParenthese node)
    {
        defaultCase(node);
    }

    public void caseTLBrace(TLBrace node)
    {
        defaultCase(node);
    }

    public void caseTRBrace(TRBrace node)
    {
        defaultCase(node);
    }

    public void caseTLBracket(TLBracket node)
    {
        defaultCase(node);
    }

    public void caseTRBracket(TRBracket node)
    {
        defaultCase(node);
    }

    public void caseTSemicolon(TSemicolon node)
    {
        defaultCase(node);
    }

    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    public void caseTDot(TDot node)
    {
        defaultCase(node);
    }

    public void caseTAssign(TAssign node)
    {
        defaultCase(node);
    }

    public void caseTLt(TLt node)
    {
        defaultCase(node);
    }

    public void caseTGt(TGt node)
    {
        defaultCase(node);
    }

    public void caseTComplement(TComplement node)
    {
        defaultCase(node);
    }

    public void caseTBitComplement(TBitComplement node)
    {
        defaultCase(node);
    }

    public void caseTQuestion(TQuestion node)
    {
        defaultCase(node);
    }

    public void caseTColon(TColon node)
    {
        defaultCase(node);
    }

    public void caseTEq(TEq node)
    {
        defaultCase(node);
    }

    public void caseTLteq(TLteq node)
    {
        defaultCase(node);
    }

    public void caseTGteq(TGteq node)
    {
        defaultCase(node);
    }

    public void caseTNeq(TNeq node)
    {
        defaultCase(node);
    }

    public void caseTAnd(TAnd node)
    {
        defaultCase(node);
    }

    public void caseTOr(TOr node)
    {
        defaultCase(node);
    }

    public void caseTPlusPlus(TPlusPlus node)
    {
        defaultCase(node);
    }

    public void caseTMinusMinus(TMinusMinus node)
    {
        defaultCase(node);
    }

    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    public void caseTStar(TStar node)
    {
        defaultCase(node);
    }

    public void caseTDiv(TDiv node)
    {
        defaultCase(node);
    }

    public void caseTBitAnd(TBitAnd node)
    {
        defaultCase(node);
    }

    public void caseTBitOr(TBitOr node)
    {
        defaultCase(node);
    }

    public void caseTBitXor(TBitXor node)
    {
        defaultCase(node);
    }

    public void caseTMod(TMod node)
    {
        defaultCase(node);
    }

    public void caseTShiftLeft(TShiftLeft node)
    {
        defaultCase(node);
    }

    public void caseTSignedShiftRight(TSignedShiftRight node)
    {
        defaultCase(node);
    }

    public void caseTUnsignedShiftRight(TUnsignedShiftRight node)
    {
        defaultCase(node);
    }

    public void caseTPlusAssign(TPlusAssign node)
    {
        defaultCase(node);
    }

    public void caseTMinusAssign(TMinusAssign node)
    {
        defaultCase(node);
    }

    public void caseTStarAssign(TStarAssign node)
    {
        defaultCase(node);
    }

    public void caseTDivAssign(TDivAssign node)
    {
        defaultCase(node);
    }

    public void caseTBitAndAssign(TBitAndAssign node)
    {
        defaultCase(node);
    }

    public void caseTBitOrAssign(TBitOrAssign node)
    {
        defaultCase(node);
    }

    public void caseTBitXorAssign(TBitXorAssign node)
    {
        defaultCase(node);
    }

    public void caseTModAssign(TModAssign node)
    {
        defaultCase(node);
    }

    public void caseTShiftLeftAssign(TShiftLeftAssign node)
    {
        defaultCase(node);
    }

    public void caseTSignedShiftRightAssign(TSignedShiftRightAssign node)
    {
        defaultCase(node);
    }

    public void caseTUnsignedShiftRightAssign(TUnsignedShiftRightAssign node)
    {
        defaultCase(node);
    }

    public void caseTDecimalIntegerLiteral(TDecimalIntegerLiteral node)
    {
        defaultCase(node);
    }

    public void caseTHexIntegerLiteral(THexIntegerLiteral node)
    {
        defaultCase(node);
    }

    public void caseTOctalIntegerLiteral(TOctalIntegerLiteral node)
    {
        defaultCase(node);
    }

    public void caseTFloatingPointLiteral(TFloatingPointLiteral node)
    {
        defaultCase(node);
    }

    public void caseTCharacterLiteral(TCharacterLiteral node)
    {
        defaultCase(node);
    }

    public void caseTStringLiteral(TStringLiteral node)
    {
        defaultCase(node);
    }

    public void caseTIdentifier(TIdentifier node)
    {
        defaultCase(node);
    }

    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
