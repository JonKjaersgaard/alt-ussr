/* This file was generated by SableCC (http://www.sablecc.org/). */

package dcd.highlevel.rdcd.parser.node;

import java.util.*;
import dcd.highlevel.rdcd.parser.analysis.*;

@SuppressWarnings("nls")
public final class ARoleDeclaration extends PRoleDeclaration
{
    private TRole _role_;
    private TIdentifier _name_;
    private TExtends _extends_;
    private TIdentifier _super_;
    private TLBrace _lBrace_;
    private final LinkedList<PConstant> _constant_ = new LinkedList<PConstant>();
    private final LinkedList<PInvariant> _invariant_ = new LinkedList<PInvariant>();
    private TRBrace _rBrace_;

    public ARoleDeclaration()
    {
        // Constructor
    }

    public ARoleDeclaration(
        @SuppressWarnings("hiding") TRole _role_,
        @SuppressWarnings("hiding") TIdentifier _name_,
        @SuppressWarnings("hiding") TExtends _extends_,
        @SuppressWarnings("hiding") TIdentifier _super_,
        @SuppressWarnings("hiding") TLBrace _lBrace_,
        @SuppressWarnings("hiding") List<PConstant> _constant_,
        @SuppressWarnings("hiding") List<PInvariant> _invariant_,
        @SuppressWarnings("hiding") TRBrace _rBrace_)
    {
        // Constructor
        setRole(_role_);

        setName(_name_);

        setExtends(_extends_);

        setSuper(_super_);

        setLBrace(_lBrace_);

        setConstant(_constant_);

        setInvariant(_invariant_);

        setRBrace(_rBrace_);

    }

    @Override
    public Object clone()
    {
        return new ARoleDeclaration(
            cloneNode(this._role_),
            cloneNode(this._name_),
            cloneNode(this._extends_),
            cloneNode(this._super_),
            cloneNode(this._lBrace_),
            cloneList(this._constant_),
            cloneList(this._invariant_),
            cloneNode(this._rBrace_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseARoleDeclaration(this);
    }

    public TRole getRole()
    {
        return this._role_;
    }

    public void setRole(TRole node)
    {
        if(this._role_ != null)
        {
            this._role_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._role_ = node;
    }

    public TIdentifier getName()
    {
        return this._name_;
    }

    public void setName(TIdentifier node)
    {
        if(this._name_ != null)
        {
            this._name_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._name_ = node;
    }

    public TExtends getExtends()
    {
        return this._extends_;
    }

    public void setExtends(TExtends node)
    {
        if(this._extends_ != null)
        {
            this._extends_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._extends_ = node;
    }

    public TIdentifier getSuper()
    {
        return this._super_;
    }

    public void setSuper(TIdentifier node)
    {
        if(this._super_ != null)
        {
            this._super_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._super_ = node;
    }

    public TLBrace getLBrace()
    {
        return this._lBrace_;
    }

    public void setLBrace(TLBrace node)
    {
        if(this._lBrace_ != null)
        {
            this._lBrace_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lBrace_ = node;
    }

    public LinkedList<PConstant> getConstant()
    {
        return this._constant_;
    }

    public void setConstant(List<PConstant> list)
    {
        this._constant_.clear();
        this._constant_.addAll(list);
        for(PConstant e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public LinkedList<PInvariant> getInvariant()
    {
        return this._invariant_;
    }

    public void setInvariant(List<PInvariant> list)
    {
        this._invariant_.clear();
        this._invariant_.addAll(list);
        for(PInvariant e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public TRBrace getRBrace()
    {
        return this._rBrace_;
    }

    public void setRBrace(TRBrace node)
    {
        if(this._rBrace_ != null)
        {
            this._rBrace_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rBrace_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._role_)
            + toString(this._name_)
            + toString(this._extends_)
            + toString(this._super_)
            + toString(this._lBrace_)
            + toString(this._constant_)
            + toString(this._invariant_)
            + toString(this._rBrace_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._role_ == child)
        {
            this._role_ = null;
            return;
        }

        if(this._name_ == child)
        {
            this._name_ = null;
            return;
        }

        if(this._extends_ == child)
        {
            this._extends_ = null;
            return;
        }

        if(this._super_ == child)
        {
            this._super_ = null;
            return;
        }

        if(this._lBrace_ == child)
        {
            this._lBrace_ = null;
            return;
        }

        if(this._constant_.remove(child))
        {
            return;
        }

        if(this._invariant_.remove(child))
        {
            return;
        }

        if(this._rBrace_ == child)
        {
            this._rBrace_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._role_ == oldChild)
        {
            setRole((TRole) newChild);
            return;
        }

        if(this._name_ == oldChild)
        {
            setName((TIdentifier) newChild);
            return;
        }

        if(this._extends_ == oldChild)
        {
            setExtends((TExtends) newChild);
            return;
        }

        if(this._super_ == oldChild)
        {
            setSuper((TIdentifier) newChild);
            return;
        }

        if(this._lBrace_ == oldChild)
        {
            setLBrace((TLBrace) newChild);
            return;
        }

        for(ListIterator<PConstant> i = this._constant_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PConstant) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PInvariant> i = this._invariant_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PInvariant) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._rBrace_ == oldChild)
        {
            setRBrace((TRBrace) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
