/* This file was generated by SableCC (http://www.sablecc.org/). */

package dcd.highlevel.rdcd.parser.node;

import dcd.highlevel.rdcd.parser.analysis.*;

@SuppressWarnings("nls")
public final class AAbstractConstant extends PConstant
{
    private TAbstract _abstract_;
    private TIdentifier _name_;
    private TSemicolon _semicolon_;

    public AAbstractConstant()
    {
        // Constructor
    }

    public AAbstractConstant(
        @SuppressWarnings("hiding") TAbstract _abstract_,
        @SuppressWarnings("hiding") TIdentifier _name_,
        @SuppressWarnings("hiding") TSemicolon _semicolon_)
    {
        // Constructor
        setAbstract(_abstract_);

        setName(_name_);

        setSemicolon(_semicolon_);

    }

    @Override
    public Object clone()
    {
        return new AAbstractConstant(
            cloneNode(this._abstract_),
            cloneNode(this._name_),
            cloneNode(this._semicolon_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAbstractConstant(this);
    }

    public TAbstract getAbstract()
    {
        return this._abstract_;
    }

    public void setAbstract(TAbstract node)
    {
        if(this._abstract_ != null)
        {
            this._abstract_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._abstract_ = node;
    }

    public TIdentifier getName()
    {
        return this._name_;
    }

    public void setName(TIdentifier node)
    {
        if(this._name_ != null)
        {
            this._name_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._name_ = node;
    }

    public TSemicolon getSemicolon()
    {
        return this._semicolon_;
    }

    public void setSemicolon(TSemicolon node)
    {
        if(this._semicolon_ != null)
        {
            this._semicolon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._semicolon_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._abstract_)
            + toString(this._name_)
            + toString(this._semicolon_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._abstract_ == child)
        {
            this._abstract_ = null;
            return;
        }

        if(this._name_ == child)
        {
            this._name_ = null;
            return;
        }

        if(this._semicolon_ == child)
        {
            this._semicolon_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._abstract_ == oldChild)
        {
            setAbstract((TAbstract) newChild);
            return;
        }

        if(this._name_ == oldChild)
        {
            setName((TIdentifier) newChild);
            return;
        }

        if(this._semicolon_ == oldChild)
        {
            setSemicolon((TSemicolon) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
