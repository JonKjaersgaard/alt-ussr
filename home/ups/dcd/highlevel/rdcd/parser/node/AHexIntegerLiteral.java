/* This file was generated by SableCC (http://www.sablecc.org/). */

package dcd.highlevel.rdcd.parser.node;

import dcd.highlevel.rdcd.parser.analysis.*;

@SuppressWarnings("nls")
public final class AHexIntegerLiteral extends PIntegerLiteral
{
    private THexIntegerLiteral _hexIntegerLiteral_;

    public AHexIntegerLiteral()
    {
        // Constructor
    }

    public AHexIntegerLiteral(
        @SuppressWarnings("hiding") THexIntegerLiteral _hexIntegerLiteral_)
    {
        // Constructor
        setHexIntegerLiteral(_hexIntegerLiteral_);

    }

    @Override
    public Object clone()
    {
        return new AHexIntegerLiteral(
            cloneNode(this._hexIntegerLiteral_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAHexIntegerLiteral(this);
    }

    public THexIntegerLiteral getHexIntegerLiteral()
    {
        return this._hexIntegerLiteral_;
    }

    public void setHexIntegerLiteral(THexIntegerLiteral node)
    {
        if(this._hexIntegerLiteral_ != null)
        {
            this._hexIntegerLiteral_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._hexIntegerLiteral_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._hexIntegerLiteral_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._hexIntegerLiteral_ == child)
        {
            this._hexIntegerLiteral_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._hexIntegerLiteral_ == oldChild)
        {
            setHexIntegerLiteral((THexIntegerLiteral) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
