/* This file was generated by SableCC (http://www.sablecc.org/). */

package dcd.highlevel.rdcd.parser.node;

import java.util.*;
import dcd.highlevel.rdcd.parser.analysis.*;

@SuppressWarnings("nls")
public final class ACompilationUnit extends PCompilationUnit
{
    private final LinkedList<PRoleDeclaration> _roleDeclaration_ = new LinkedList<PRoleDeclaration>();
    private PDeploymentSpec _deploymentSpec_;

    public ACompilationUnit()
    {
        // Constructor
    }

    public ACompilationUnit(
        @SuppressWarnings("hiding") List<PRoleDeclaration> _roleDeclaration_,
        @SuppressWarnings("hiding") PDeploymentSpec _deploymentSpec_)
    {
        // Constructor
        setRoleDeclaration(_roleDeclaration_);

        setDeploymentSpec(_deploymentSpec_);

    }

    @Override
    public Object clone()
    {
        return new ACompilationUnit(
            cloneList(this._roleDeclaration_),
            cloneNode(this._deploymentSpec_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseACompilationUnit(this);
    }

    public LinkedList<PRoleDeclaration> getRoleDeclaration()
    {
        return this._roleDeclaration_;
    }

    public void setRoleDeclaration(List<PRoleDeclaration> list)
    {
        this._roleDeclaration_.clear();
        this._roleDeclaration_.addAll(list);
        for(PRoleDeclaration e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public PDeploymentSpec getDeploymentSpec()
    {
        return this._deploymentSpec_;
    }

    public void setDeploymentSpec(PDeploymentSpec node)
    {
        if(this._deploymentSpec_ != null)
        {
            this._deploymentSpec_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._deploymentSpec_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._roleDeclaration_)
            + toString(this._deploymentSpec_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._roleDeclaration_.remove(child))
        {
            return;
        }

        if(this._deploymentSpec_ == child)
        {
            this._deploymentSpec_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<PRoleDeclaration> i = this._roleDeclaration_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PRoleDeclaration) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._deploymentSpec_ == oldChild)
        {
            setDeploymentSpec((PDeploymentSpec) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
