/* This file was generated by SableCC (http://www.sablecc.org/). */

package dcd.highlevel.rdcd.parser.parser;

import dcd.highlevel.rdcd.parser.lexer.*;
import dcd.highlevel.rdcd.parser.node.*;
import dcd.highlevel.rdcd.parser.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList nodeList;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList list = new ArrayList();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    switch(this.action[1])
                    {
                    case 0: /* reduce AGoal */
		    {
			ArrayList list = new0();
			push(goTo(0), list, false);
		    }
		    break;
                    case 1: /* reduce AIntegerLiteralLiteral */
		    {
			ArrayList list = new1();
			push(goTo(1), list, false);
		    }
		    break;
                    case 2: /* reduce ABooleanLiteralLiteral */
		    {
			ArrayList list = new2();
			push(goTo(1), list, false);
		    }
		    break;
                    case 3: /* reduce ATrueBooleanLiteral */
		    {
			ArrayList list = new3();
			push(goTo(2), list, false);
		    }
		    break;
                    case 4: /* reduce AFalseBooleanLiteral */
		    {
			ArrayList list = new4();
			push(goTo(2), list, false);
		    }
		    break;
                    case 5: /* reduce ADecimalIntegerLiteral */
		    {
			ArrayList list = new5();
			push(goTo(3), list, false);
		    }
		    break;
                    case 6: /* reduce AHexIntegerLiteral */
		    {
			ArrayList list = new6();
			push(goTo(3), list, false);
		    }
		    break;
                    case 7: /* reduce AOctalIntegerLiteral */
		    {
			ArrayList list = new7();
			push(goTo(3), list, false);
		    }
		    break;
                    case 8: /* reduce ASimpleNameName */
		    {
			ArrayList list = new8();
			push(goTo(4), list, false);
		    }
		    break;
                    case 9: /* reduce ASimpleName */
		    {
			ArrayList list = new9();
			push(goTo(5), list, false);
		    }
		    break;
                    case 10: /* reduce AAcompilationunit1CompilationUnit */
		    {
			ArrayList list = new10();
			push(goTo(6), list, false);
		    }
		    break;
                    case 11: /* reduce AAcompilationunit2CompilationUnit */
		    {
			ArrayList list = new11();
			push(goTo(6), list, false);
		    }
		    break;
                    case 12: /* reduce AAdeploymentspec1DeploymentSpec */
		    {
			ArrayList list = new12();
			push(goTo(7), list, false);
		    }
		    break;
                    case 13: /* reduce AAdeploymentspec2DeploymentSpec */
		    {
			ArrayList list = new13();
			push(goTo(7), list, false);
		    }
		    break;
                    case 14: /* reduce AAroledeclaration1RoleDeclaration */
		    {
			ArrayList list = new14();
			push(goTo(8), list, false);
		    }
		    break;
                    case 15: /* reduce AAroledeclaration2RoleDeclaration */
		    {
			ArrayList list = new15();
			push(goTo(8), list, false);
		    }
		    break;
                    case 16: /* reduce AAroledeclaration3RoleDeclaration */
		    {
			ArrayList list = new16();
			push(goTo(8), list, false);
		    }
		    break;
                    case 17: /* reduce AAroledeclaration4RoleDeclaration */
		    {
			ArrayList list = new17();
			push(goTo(8), list, false);
		    }
		    break;
                    case 18: /* reduce AAbstractConstant */
		    {
			ArrayList list = new18();
			push(goTo(9), list, false);
		    }
		    break;
                    case 19: /* reduce AConcreteIntConstant */
		    {
			ArrayList list = new19();
			push(goTo(9), list, false);
		    }
		    break;
                    case 20: /* reduce AConcreteNameConstant */
		    {
			ArrayList list = new20();
			push(goTo(9), list, false);
		    }
		    break;
                    case 21: /* reduce AInvariant */
		    {
			ArrayList list = new21();
			push(goTo(10), list, false);
		    }
		    break;
                    case 22: /* reduce AVariableExp */
		    {
			ArrayList list = new22();
			push(goTo(11), list, false);
		    }
		    break;
                    case 23: /* reduce ABinexpExp */
		    {
			ArrayList list = new23();
			push(goTo(11), list, false);
		    }
		    break;
                    case 24: /* reduce AAdditionBinaryExp */
		    {
			ArrayList list = new24();
			push(goTo(12), list, false);
		    }
		    break;
                    case 25: /* reduce AEqualityBinaryExp */
		    {
			ArrayList list = new25();
			push(goTo(12), list, false);
		    }
		    break;
                    case 26: /* reduce ALessThanBinaryExp */
		    {
			ArrayList list = new26();
			push(goTo(12), list, false);
		    }
		    break;
                    case 27: /* reduce AGreaterThanBinaryExp */
		    {
			ArrayList list = new27();
			push(goTo(12), list, false);
		    }
		    break;
                    case 28: /* reduce ATerminal$RoleDeclaration */
		    {
			ArrayList list = new28();
			push(goTo(13), list, true);
		    }
		    break;
                    case 29: /* reduce ANonTerminal$RoleDeclaration */
		    {
			ArrayList list = new29();
			push(goTo(13), list, true);
		    }
		    break;
                    case 30: /* reduce ATerminal$Identifier */
		    {
			ArrayList list = new30();
			push(goTo(14), list, true);
		    }
		    break;
                    case 31: /* reduce ANonTerminal$Identifier */
		    {
			ArrayList list = new31();
			push(goTo(14), list, true);
		    }
		    break;
                    case 32: /* reduce ATerminal$Constant */
		    {
			ArrayList list = new32();
			push(goTo(15), list, true);
		    }
		    break;
                    case 33: /* reduce ANonTerminal$Constant */
		    {
			ArrayList list = new33();
			push(goTo(15), list, true);
		    }
		    break;
                    case 34: /* reduce ATerminal$Invariant */
		    {
			ArrayList list = new34();
			push(goTo(16), list, true);
		    }
		    break;
                    case 35: /* reduce ANonTerminal$Invariant */
		    {
			ArrayList list = new35();
			push(goTo(16), list, true);
		    }
		    break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PGoal node1 = (PGoal) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }



    @SuppressWarnings("unchecked")
    ArrayList new0() /* reduce AGoal */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PGoal pgoalNode1;
        {
            // Block
        PCompilationUnit pcompilationunitNode2;
        pcompilationunitNode2 = (PCompilationUnit)nodeArrayList1.get(0);

        pgoalNode1 = new AGoal(pcompilationunitNode2);
        }
	nodeList.add(pgoalNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new1() /* reduce AIntegerLiteralLiteral */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLiteral pliteralNode1;
        {
            // Block
        PIntegerLiteral pintegerliteralNode2;
        pintegerliteralNode2 = (PIntegerLiteral)nodeArrayList1.get(0);

        pliteralNode1 = new AIntegerLiteralLiteral(pintegerliteralNode2);
        }
	nodeList.add(pliteralNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new2() /* reduce ABooleanLiteralLiteral */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLiteral pliteralNode1;
        {
            // Block
        PBooleanLiteral pbooleanliteralNode2;
        pbooleanliteralNode2 = (PBooleanLiteral)nodeArrayList1.get(0);

        pliteralNode1 = new ABooleanLiteralLiteral(pbooleanliteralNode2);
        }
	nodeList.add(pliteralNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new3() /* reduce ATrueBooleanLiteral */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PBooleanLiteral pbooleanliteralNode1;
        {
            // Block
        TTrue ttrueNode2;
        ttrueNode2 = (TTrue)nodeArrayList1.get(0);

        pbooleanliteralNode1 = new ATrueBooleanLiteral(ttrueNode2);
        }
	nodeList.add(pbooleanliteralNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new4() /* reduce AFalseBooleanLiteral */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PBooleanLiteral pbooleanliteralNode1;
        {
            // Block
        TFalse tfalseNode2;
        tfalseNode2 = (TFalse)nodeArrayList1.get(0);

        pbooleanliteralNode1 = new AFalseBooleanLiteral(tfalseNode2);
        }
	nodeList.add(pbooleanliteralNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new5() /* reduce ADecimalIntegerLiteral */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PIntegerLiteral pintegerliteralNode1;
        {
            // Block
        TDecimalIntegerLiteral tdecimalintegerliteralNode2;
        tdecimalintegerliteralNode2 = (TDecimalIntegerLiteral)nodeArrayList1.get(0);

        pintegerliteralNode1 = new ADecimalIntegerLiteral(tdecimalintegerliteralNode2);
        }
	nodeList.add(pintegerliteralNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new6() /* reduce AHexIntegerLiteral */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PIntegerLiteral pintegerliteralNode1;
        {
            // Block
        THexIntegerLiteral thexintegerliteralNode2;
        thexintegerliteralNode2 = (THexIntegerLiteral)nodeArrayList1.get(0);

        pintegerliteralNode1 = new AHexIntegerLiteral(thexintegerliteralNode2);
        }
	nodeList.add(pintegerliteralNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new7() /* reduce AOctalIntegerLiteral */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PIntegerLiteral pintegerliteralNode1;
        {
            // Block
        TOctalIntegerLiteral toctalintegerliteralNode2;
        toctalintegerliteralNode2 = (TOctalIntegerLiteral)nodeArrayList1.get(0);

        pintegerliteralNode1 = new AOctalIntegerLiteral(toctalintegerliteralNode2);
        }
	nodeList.add(pintegerliteralNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new8() /* reduce ASimpleNameName */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PName pnameNode1;
        {
            // Block
        PSimpleName psimplenameNode2;
        psimplenameNode2 = (PSimpleName)nodeArrayList1.get(0);

        pnameNode1 = new ASimpleNameName(psimplenameNode2);
        }
	nodeList.add(pnameNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new9() /* reduce ASimpleName */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSimpleName psimplenameNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        psimplenameNode1 = new ASimpleName(tidentifierNode2);
        }
	nodeList.add(psimplenameNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new10() /* reduce AAcompilationunit1CompilationUnit */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCompilationUnit pcompilationunitNode1;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        PDeploymentSpec pdeploymentspecNode3;
        {
            // Block
        }
        pdeploymentspecNode3 = (PDeploymentSpec)nodeArrayList1.get(0);

        pcompilationunitNode1 = new ACompilationUnit(listNode2, pdeploymentspecNode3);
        }
	nodeList.add(pcompilationunitNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new11() /* reduce AAcompilationunit2CompilationUnit */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCompilationUnit pcompilationunitNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        PDeploymentSpec pdeploymentspecNode4;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pdeploymentspecNode4 = (PDeploymentSpec)nodeArrayList2.get(0);

        pcompilationunitNode1 = new ACompilationUnit(listNode3, pdeploymentspecNode4);
        }
	nodeList.add(pcompilationunitNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new12() /* reduce AAdeploymentspec1DeploymentSpec */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDeploymentSpec pdeploymentspecNode1;
        {
            // Block
        TDeployment tdeploymentNode2;
        TLBrace tlbraceNode3;
        LinkedList listNode4 = new LinkedList();
        TRBrace trbraceNode5;
        tdeploymentNode2 = (TDeployment)nodeArrayList1.get(0);
        tlbraceNode3 = (TLBrace)nodeArrayList2.get(0);
        {
            // Block
        }
        trbraceNode5 = (TRBrace)nodeArrayList3.get(0);

        pdeploymentspecNode1 = new ADeploymentSpec(tdeploymentNode2, tlbraceNode3, listNode4, trbraceNode5);
        }
	nodeList.add(pdeploymentspecNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new13() /* reduce AAdeploymentspec2DeploymentSpec */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDeploymentSpec pdeploymentspecNode1;
        {
            // Block
        TDeployment tdeploymentNode2;
        TLBrace tlbraceNode3;
        LinkedList listNode5 = new LinkedList();
        TRBrace trbraceNode6;
        tdeploymentNode2 = (TDeployment)nodeArrayList1.get(0);
        tlbraceNode3 = (TLBrace)nodeArrayList2.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        trbraceNode6 = (TRBrace)nodeArrayList4.get(0);

        pdeploymentspecNode1 = new ADeploymentSpec(tdeploymentNode2, tlbraceNode3, listNode5, trbraceNode6);
        }
	nodeList.add(pdeploymentspecNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new14() /* reduce AAroledeclaration1RoleDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRoleDeclaration proledeclarationNode1;
        {
            // Block
        TRole troleNode2;
        TIdentifier tidentifierNode3;
        TExtends textendsNode4;
        TIdentifier tidentifierNode5;
        TLBrace tlbraceNode6;
        LinkedList listNode7 = new LinkedList();
        LinkedList listNode8 = new LinkedList();
        TRBrace trbraceNode9;
        troleNode2 = (TRole)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        textendsNode4 = (TExtends)nodeArrayList3.get(0);
        tidentifierNode5 = (TIdentifier)nodeArrayList4.get(0);
        tlbraceNode6 = (TLBrace)nodeArrayList5.get(0);
        {
            // Block
        }
        {
            // Block
        }
        trbraceNode9 = (TRBrace)nodeArrayList6.get(0);

        proledeclarationNode1 = new ARoleDeclaration(troleNode2, tidentifierNode3, textendsNode4, tidentifierNode5, tlbraceNode6, listNode7, listNode8, trbraceNode9);
        }
	nodeList.add(proledeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new15() /* reduce AAroledeclaration2RoleDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRoleDeclaration proledeclarationNode1;
        {
            // Block
        TRole troleNode2;
        TIdentifier tidentifierNode3;
        TExtends textendsNode4;
        TIdentifier tidentifierNode5;
        TLBrace tlbraceNode6;
        LinkedList listNode8 = new LinkedList();
        LinkedList listNode9 = new LinkedList();
        TRBrace trbraceNode10;
        troleNode2 = (TRole)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        textendsNode4 = (TExtends)nodeArrayList3.get(0);
        tidentifierNode5 = (TIdentifier)nodeArrayList4.get(0);
        tlbraceNode6 = (TLBrace)nodeArrayList5.get(0);
        {
            // Block
        LinkedList listNode7 = new LinkedList();
        listNode7 = (LinkedList)nodeArrayList6.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        {
            // Block
        }
        trbraceNode10 = (TRBrace)nodeArrayList7.get(0);

        proledeclarationNode1 = new ARoleDeclaration(troleNode2, tidentifierNode3, textendsNode4, tidentifierNode5, tlbraceNode6, listNode8, listNode9, trbraceNode10);
        }
	nodeList.add(proledeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new16() /* reduce AAroledeclaration3RoleDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRoleDeclaration proledeclarationNode1;
        {
            // Block
        TRole troleNode2;
        TIdentifier tidentifierNode3;
        TExtends textendsNode4;
        TIdentifier tidentifierNode5;
        TLBrace tlbraceNode6;
        LinkedList listNode7 = new LinkedList();
        LinkedList listNode9 = new LinkedList();
        TRBrace trbraceNode10;
        troleNode2 = (TRole)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        textendsNode4 = (TExtends)nodeArrayList3.get(0);
        tidentifierNode5 = (TIdentifier)nodeArrayList4.get(0);
        tlbraceNode6 = (TLBrace)nodeArrayList5.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList listNode8 = new LinkedList();
        listNode8 = (LinkedList)nodeArrayList6.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        trbraceNode10 = (TRBrace)nodeArrayList7.get(0);

        proledeclarationNode1 = new ARoleDeclaration(troleNode2, tidentifierNode3, textendsNode4, tidentifierNode5, tlbraceNode6, listNode7, listNode9, trbraceNode10);
        }
	nodeList.add(proledeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new17() /* reduce AAroledeclaration4RoleDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRoleDeclaration proledeclarationNode1;
        {
            // Block
        TRole troleNode2;
        TIdentifier tidentifierNode3;
        TExtends textendsNode4;
        TIdentifier tidentifierNode5;
        TLBrace tlbraceNode6;
        LinkedList listNode8 = new LinkedList();
        LinkedList listNode10 = new LinkedList();
        TRBrace trbraceNode11;
        troleNode2 = (TRole)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        textendsNode4 = (TExtends)nodeArrayList3.get(0);
        tidentifierNode5 = (TIdentifier)nodeArrayList4.get(0);
        tlbraceNode6 = (TLBrace)nodeArrayList5.get(0);
        {
            // Block
        LinkedList listNode7 = new LinkedList();
        listNode7 = (LinkedList)nodeArrayList6.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        {
            // Block
        LinkedList listNode9 = new LinkedList();
        listNode9 = (LinkedList)nodeArrayList7.get(0);
	if(listNode9 != null)
	{
	  listNode10.addAll(listNode9);
	}
        }
        trbraceNode11 = (TRBrace)nodeArrayList8.get(0);

        proledeclarationNode1 = new ARoleDeclaration(troleNode2, tidentifierNode3, textendsNode4, tidentifierNode5, tlbraceNode6, listNode8, listNode10, trbraceNode11);
        }
	nodeList.add(proledeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new18() /* reduce AAbstractConstant */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PConstant pconstantNode1;
        {
            // Block
        TAbstract tabstractNode2;
        TIdentifier tidentifierNode3;
        TSemicolon tsemicolonNode4;
        tabstractNode2 = (TAbstract)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tsemicolonNode4 = (TSemicolon)nodeArrayList3.get(0);

        pconstantNode1 = new AAbstractConstant(tabstractNode2, tidentifierNode3, tsemicolonNode4);
        }
	nodeList.add(pconstantNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new19() /* reduce AConcreteIntConstant */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PConstant pconstantNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TAssign tassignNode3;
        PIntegerLiteral pintegerliteralNode4;
        TSemicolon tsemicolonNode5;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tassignNode3 = (TAssign)nodeArrayList2.get(0);
        pintegerliteralNode4 = (PIntegerLiteral)nodeArrayList3.get(0);
        tsemicolonNode5 = (TSemicolon)nodeArrayList4.get(0);

        pconstantNode1 = new AConcreteIntConstant(tidentifierNode2, tassignNode3, pintegerliteralNode4, tsemicolonNode5);
        }
	nodeList.add(pconstantNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new20() /* reduce AConcreteNameConstant */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PConstant pconstantNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TAssign tassignNode3;
        TIdentifier tidentifierNode4;
        TSemicolon tsemicolonNode5;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tassignNode3 = (TAssign)nodeArrayList2.get(0);
        tidentifierNode4 = (TIdentifier)nodeArrayList3.get(0);
        tsemicolonNode5 = (TSemicolon)nodeArrayList4.get(0);

        pconstantNode1 = new AConcreteNameConstant(tidentifierNode2, tassignNode3, tidentifierNode4, tsemicolonNode5);
        }
	nodeList.add(pconstantNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new21() /* reduce AInvariant */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PInvariant pinvariantNode1;
        {
            // Block
        PExp pexpNode2;
        TSemicolon tsemicolonNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);

        pinvariantNode1 = new AInvariant(pexpNode2, tsemicolonNode3);
        }
	nodeList.add(pinvariantNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new22() /* reduce AVariableExp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pexpNode1 = new AVariableExp(tidentifierNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new23() /* reduce ABinexpExp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TLParenthese tlparentheseNode2;
        PBinaryExp pbinaryexpNode3;
        TRParenthese trparentheseNode4;
        tlparentheseNode2 = (TLParenthese)nodeArrayList1.get(0);
        pbinaryexpNode3 = (PBinaryExp)nodeArrayList2.get(0);
        trparentheseNode4 = (TRParenthese)nodeArrayList3.get(0);

        pexpNode1 = new ABinexpExp(tlparentheseNode2, pbinaryexpNode3, trparentheseNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new24() /* reduce AAdditionBinaryExp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PBinaryExp pbinaryexpNode1;
        {
            // Block
        PExp pexpNode2;
        TPlus tplusNode3;
        PExp pexpNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);

        pbinaryexpNode1 = new AAdditionBinaryExp(pexpNode2, tplusNode3, pexpNode4);
        }
	nodeList.add(pbinaryexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new25() /* reduce AEqualityBinaryExp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PBinaryExp pbinaryexpNode1;
        {
            // Block
        PExp pexpNode2;
        TEq teqNode3;
        PExp pexpNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        teqNode3 = (TEq)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);

        pbinaryexpNode1 = new AEqualityBinaryExp(pexpNode2, teqNode3, pexpNode4);
        }
	nodeList.add(pbinaryexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new26() /* reduce ALessThanBinaryExp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PBinaryExp pbinaryexpNode1;
        {
            // Block
        PExp pexpNode2;
        TLt tltNode3;
        PExp pexpNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tltNode3 = (TLt)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);

        pbinaryexpNode1 = new ALessThanBinaryExp(pexpNode2, tltNode3, pexpNode4);
        }
	nodeList.add(pbinaryexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new27() /* reduce AGreaterThanBinaryExp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PBinaryExp pbinaryexpNode1;
        {
            // Block
        PExp pexpNode2;
        TGt tgtNode3;
        PExp pexpNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tgtNode3 = (TGt)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);

        pbinaryexpNode1 = new AGreaterThanBinaryExp(pexpNode2, tgtNode3, pexpNode4);
        }
	nodeList.add(pbinaryexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new28() /* reduce ATerminal$RoleDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PRoleDeclaration proledeclarationNode1;
        proledeclarationNode1 = (PRoleDeclaration)nodeArrayList1.get(0);
	if(proledeclarationNode1 != null)
	{
	  listNode2.add(proledeclarationNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new29() /* reduce ANonTerminal$RoleDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PRoleDeclaration proledeclarationNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        proledeclarationNode2 = (PRoleDeclaration)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(proledeclarationNode2 != null)
	{
	  listNode3.add(proledeclarationNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new30() /* reduce ATerminal$Identifier */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        TIdentifier tidentifierNode1;
        tidentifierNode1 = (TIdentifier)nodeArrayList1.get(0);
	if(tidentifierNode1 != null)
	{
	  listNode2.add(tidentifierNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new31() /* reduce ANonTerminal$Identifier */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        TIdentifier tidentifierNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(tidentifierNode2 != null)
	{
	  listNode3.add(tidentifierNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new32() /* reduce ATerminal$Constant */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PConstant pconstantNode1;
        pconstantNode1 = (PConstant)nodeArrayList1.get(0);
	if(pconstantNode1 != null)
	{
	  listNode2.add(pconstantNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new33() /* reduce ANonTerminal$Constant */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PConstant pconstantNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pconstantNode2 = (PConstant)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pconstantNode2 != null)
	{
	  listNode3.add(pconstantNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new34() /* reduce ATerminal$Invariant */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PInvariant pinvariantNode1;
        pinvariantNode1 = (PInvariant)nodeArrayList1.get(0);
	if(pinvariantNode1 != null)
	{
	  listNode2.add(pinvariantNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new35() /* reduce ANonTerminal$Invariant */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PInvariant pinvariantNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pinvariantNode2 = (PInvariant)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pinvariantNode2 != null)
	{
	  listNode3.add(pinvariantNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {2, SHIFT, 1}, {5, SHIFT, 2}, },
			{{-1, ERROR, 1}, {60, SHIFT, 8}, },
			{{-1, ERROR, 2}, {10, SHIFT, 9}, },
			{{-1, ERROR, 3}, {61, ACCEPT, -1}, },
			{{-1, REDUCE, 0}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 28}, },
			{{-1, ERROR, 7}, {2, SHIFT, 1}, {5, SHIFT, 2}, },
			{{-1, ERROR, 8}, {4, SHIFT, 12}, },
			{{-1, ERROR, 9}, {11, SHIFT, 13}, {60, SHIFT, 14}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 29}, },
			{{-1, ERROR, 12}, {60, SHIFT, 16}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 30}, },
			{{-1, ERROR, 15}, {11, SHIFT, 17}, {60, SHIFT, 18}, },
			{{-1, ERROR, 16}, {10, SHIFT, 19}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 31}, },
			{{-1, ERROR, 19}, {0, SHIFT, 20}, {8, SHIFT, 21}, {11, SHIFT, 22}, {60, SHIFT, 23}, },
			{{-1, ERROR, 20}, {60, SHIFT, 29}, },
			{{-1, ERROR, 21}, {8, SHIFT, 21}, {60, SHIFT, 30}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 22}, {17, SHIFT, 33}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 34}, },
			{{-1, ERROR, 26}, {14, SHIFT, 34}, },
			{{-1, ERROR, 27}, {0, SHIFT, 20}, {8, SHIFT, 21}, {11, SHIFT, 35}, {60, SHIFT, 23}, },
			{{-1, ERROR, 28}, {8, SHIFT, 21}, {11, SHIFT, 38}, {60, SHIFT, 30}, },
			{{-1, ERROR, 29}, {14, SHIFT, 40}, },
			{{-1, REDUCE, 22}, },
			{{-1, ERROR, 31}, {18, SHIFT, 41}, {19, SHIFT, 42}, {24, SHIFT, 43}, {32, SHIFT, 44}, },
			{{-1, ERROR, 32}, {9, SHIFT, 45}, },
			{{-1, ERROR, 33}, {54, SHIFT, 46}, {55, SHIFT, 47}, {56, SHIFT, 48}, {60, SHIFT, 49}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 33}, },
			{{-1, ERROR, 37}, {8, SHIFT, 21}, {11, SHIFT, 51}, {60, SHIFT, 30}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 18}, },
			{{-1, ERROR, 41}, {8, SHIFT, 21}, {60, SHIFT, 30}, },
			{{-1, ERROR, 42}, {8, SHIFT, 21}, {60, SHIFT, 30}, },
			{{-1, ERROR, 43}, {8, SHIFT, 21}, {60, SHIFT, 30}, },
			{{-1, ERROR, 44}, {8, SHIFT, 21}, {60, SHIFT, 30}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 7}, },
			{{-1, ERROR, 49}, {14, SHIFT, 56}, },
			{{-1, ERROR, 50}, {14, SHIFT, 57}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 19}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 3}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, 50}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, 4}, },
			{{-1, 5}, {7, 10}, },
			{{-1, 6}, {7, 11}, },
			{{-1, 24}, {27, 36}, },
			{{-1, 25}, {28, 39}, {37, 39}, },
			{{-1, 26}, {21, 31}, {41, 52}, {42, 53}, {43, 54}, {44, 55}, },
			{{-1, 32}, },
			{{-1, 7}, },
			{{-1, 15}, },
			{{-1, 27}, },
			{{-1, 28}, {27, 37}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'role', 'deployment'",
			"expecting: identifier",
			"expecting: '{'",
			"expecting: EOF",
			"expecting: 'extends'",
			"expecting: '}', identifier",
			"expecting: 'abstract', '(', '}', identifier",
			"expecting: '(', identifier",
			"expecting: ';', '='",
			"expecting: '(', '}', identifier",
			"expecting: ';'",
			"expecting: ')', ';', '<', '>', '==', '+'",
			"expecting: '<', '>', '==', '+'",
			"expecting: ')'",
			"expecting: decimal integer literal, hex integer literal, octal integer literal, identifier",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 3, 3, 0, 0, 4, 5, 3, 0, 1, 3, 5, 5, 2, 3, 5, 6, 1, 7, 0, 8, 6, 9, 10, 6, 9, 10, 11, 12, 13, 14, 9, 0, 6, 9, 0, 9, 6, 7, 7, 7, 7, 11, 10, 10, 10, 10, 10, 0, 13, 13, 13, 13, 6, 6, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
