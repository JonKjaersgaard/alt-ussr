/**
 * technique_commonType8.java This file was generated by XMLSpy 2006sp2
 * Enterprise Edition. YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION. Refer to the XMLSpy
 * Documentation for further details. http://www.altova.com/xmlspy
 */

package com.jmex.model.collada.schema;

public class technique_commonType8 extends com.jmex.model.collada.xml.Node {

    private static final long serialVersionUID = 1L;

    public technique_commonType8(technique_commonType8 node) {
        super(node);
    }

    public technique_commonType8(org.w3c.dom.Node node) {
        super(node);
    }

    public technique_commonType8(org.w3c.dom.Document doc) {
        super(doc);
    }

    public technique_commonType8(com.jmex.model.collada.xml.Document doc,
            String namespaceURI, String prefix, String name) {
        super(doc, namespaceURI, prefix, name);
    }

    public void adjustPrefix() {
        for (org.w3c.dom.Node tmpNode = getDomFirstChild(Element,
                "http://www.collada.org/2005/11/COLLADASchema", "enabled"); tmpNode != null; tmpNode = getDomNextChild(
                Element, "http://www.collada.org/2005/11/COLLADASchema",
                "enabled", tmpNode)) {
            internalAdjustPrefix(tmpNode, true);
            new enabledType(tmpNode).adjustPrefix();
        }
        for (org.w3c.dom.Node tmpNode = getDomFirstChild(Element,
                "http://www.collada.org/2005/11/COLLADASchema",
                "interpenetrate"); tmpNode != null; tmpNode = getDomNextChild(
                Element, "http://www.collada.org/2005/11/COLLADASchema",
                "interpenetrate", tmpNode)) {
            internalAdjustPrefix(tmpNode, true);
            new interpenetrateType(tmpNode).adjustPrefix();
        }
        for (org.w3c.dom.Node tmpNode = getDomFirstChild(Element,
                "http://www.collada.org/2005/11/COLLADASchema", "limits"); tmpNode != null; tmpNode = getDomNextChild(
                Element, "http://www.collada.org/2005/11/COLLADASchema",
                "limits", tmpNode)) {
            internalAdjustPrefix(tmpNode, true);
            new limitsType(tmpNode).adjustPrefix();
        }
        for (org.w3c.dom.Node tmpNode = getDomFirstChild(Element,
                "http://www.collada.org/2005/11/COLLADASchema", "spring"); tmpNode != null; tmpNode = getDomNextChild(
                Element, "http://www.collada.org/2005/11/COLLADASchema",
                "spring", tmpNode)) {
            internalAdjustPrefix(tmpNode, true);
            new springType2(tmpNode).adjustPrefix();
        }
    }

    public static int getenabledMinCount() {
        return 0;
    }

    public static int getenabledMaxCount() {
        return 1;
    }

    public int getenabledCount() {
        return getDomChildCount(Element,
                "http://www.collada.org/2005/11/COLLADASchema", "enabled");
    }

    public boolean hasenabled() {
        return hasDomChild(Element,
                "http://www.collada.org/2005/11/COLLADASchema", "enabled");
    }

    public enabledType newenabled() {
        return new enabledType(domNode.getOwnerDocument().createElementNS(
                "http://www.collada.org/2005/11/COLLADASchema", "enabled"));
    }

    public enabledType getenabledAt(int index) throws Exception {
        return new enabledType(dereference(getDomChildAt(Element,
                "http://www.collada.org/2005/11/COLLADASchema", "enabled",
                index)));
    }

    public org.w3c.dom.Node getStartingenabledCursor() throws Exception {
        return getDomFirstChild(Element,
                "http://www.collada.org/2005/11/COLLADASchema", "enabled");
    }

    public org.w3c.dom.Node getAdvancedenabledCursor(org.w3c.dom.Node curNode)
            throws Exception {
        return getDomNextChild(Element,
                "http://www.collada.org/2005/11/COLLADASchema", "enabled",
                curNode);
    }

    public enabledType getenabledValueAtCursor(org.w3c.dom.Node curNode)
            throws Exception {
        if (curNode == null)
            throw new com.jmex.model.collada.xml.XmlException("Out of range");
        else
            return new enabledType(dereference(curNode));
    }

    public enabledType getenabled() throws Exception {
        return getenabledAt(0);
    }

    public void removeenabledAt(int index) {
        removeDomChildAt(Element,
                "http://www.collada.org/2005/11/COLLADASchema", "enabled",
                index);
    }

    public void removeenabled() {
        while (hasenabled())
            removeenabledAt(0);
    }

    public void addenabled(enabledType value) {
        appendDomElement("http://www.collada.org/2005/11/COLLADASchema",
                "enabled", value);
    }

    public void insertenabledAt(enabledType value, int index) {
        insertDomElementAt("http://www.collada.org/2005/11/COLLADASchema",
                "enabled", index, value);
    }

    public void replaceenabledAt(enabledType value, int index) {
        replaceDomElementAt("http://www.collada.org/2005/11/COLLADASchema",
                "enabled", index, value);
    }

    public static int getinterpenetrateMinCount() {
        return 0;
    }

    public static int getinterpenetrateMaxCount() {
        return 1;
    }

    public int getinterpenetrateCount() {
        return getDomChildCount(Element,
                "http://www.collada.org/2005/11/COLLADASchema",
                "interpenetrate");
    }

    public boolean hasinterpenetrate() {
        return hasDomChild(Element,
                "http://www.collada.org/2005/11/COLLADASchema",
                "interpenetrate");
    }

    public interpenetrateType newinterpenetrate() {
        return new interpenetrateType(domNode.getOwnerDocument()
                .createElementNS(
                        "http://www.collada.org/2005/11/COLLADASchema",
                        "interpenetrate"));
    }

    public interpenetrateType getinterpenetrateAt(int index) throws Exception {
        return new interpenetrateType(dereference(getDomChildAt(Element,
                "http://www.collada.org/2005/11/COLLADASchema",
                "interpenetrate", index)));
    }

    public org.w3c.dom.Node getStartinginterpenetrateCursor() throws Exception {
        return getDomFirstChild(Element,
                "http://www.collada.org/2005/11/COLLADASchema",
                "interpenetrate");
    }

    public org.w3c.dom.Node getAdvancedinterpenetrateCursor(
            org.w3c.dom.Node curNode) throws Exception {
        return getDomNextChild(Element,
                "http://www.collada.org/2005/11/COLLADASchema",
                "interpenetrate", curNode);
    }

    public interpenetrateType getinterpenetrateValueAtCursor(
            org.w3c.dom.Node curNode) throws Exception {
        if (curNode == null)
            throw new com.jmex.model.collada.xml.XmlException("Out of range");
        else
            return new interpenetrateType(dereference(curNode));
    }

    public interpenetrateType getinterpenetrate() throws Exception {
        return getinterpenetrateAt(0);
    }

    public void removeinterpenetrateAt(int index) {
        removeDomChildAt(Element,
                "http://www.collada.org/2005/11/COLLADASchema",
                "interpenetrate", index);
    }

    public void removeinterpenetrate() {
        while (hasinterpenetrate())
            removeinterpenetrateAt(0);
    }

    public void addinterpenetrate(interpenetrateType value) {
        appendDomElement("http://www.collada.org/2005/11/COLLADASchema",
                "interpenetrate", value);
    }

    public void insertinterpenetrateAt(interpenetrateType value, int index) {
        insertDomElementAt("http://www.collada.org/2005/11/COLLADASchema",
                "interpenetrate", index, value);
    }

    public void replaceinterpenetrateAt(interpenetrateType value, int index) {
        replaceDomElementAt("http://www.collada.org/2005/11/COLLADASchema",
                "interpenetrate", index, value);
    }

    public static int getlimitsMinCount() {
        return 0;
    }

    public static int getlimitsMaxCount() {
        return 1;
    }

    public int getlimitsCount() {
        return getDomChildCount(Element,
                "http://www.collada.org/2005/11/COLLADASchema", "limits");
    }

    public boolean haslimits() {
        return hasDomChild(Element,
                "http://www.collada.org/2005/11/COLLADASchema", "limits");
    }

    public limitsType newlimits() {
        return new limitsType(domNode.getOwnerDocument().createElementNS(
                "http://www.collada.org/2005/11/COLLADASchema", "limits"));
    }

    public limitsType getlimitsAt(int index) throws Exception {
        return new limitsType(
                dereference(getDomChildAt(Element,
                        "http://www.collada.org/2005/11/COLLADASchema",
                        "limits", index)));
    }

    public org.w3c.dom.Node getStartinglimitsCursor() throws Exception {
        return getDomFirstChild(Element,
                "http://www.collada.org/2005/11/COLLADASchema", "limits");
    }

    public org.w3c.dom.Node getAdvancedlimitsCursor(org.w3c.dom.Node curNode)
            throws Exception {
        return getDomNextChild(Element,
                "http://www.collada.org/2005/11/COLLADASchema", "limits",
                curNode);
    }

    public limitsType getlimitsValueAtCursor(org.w3c.dom.Node curNode)
            throws Exception {
        if (curNode == null)
            throw new com.jmex.model.collada.xml.XmlException("Out of range");
        else
            return new limitsType(dereference(curNode));
    }

    public limitsType getlimits() throws Exception {
        return getlimitsAt(0);
    }

    public void removelimitsAt(int index) {
        removeDomChildAt(Element,
                "http://www.collada.org/2005/11/COLLADASchema", "limits", index);
    }

    public void removelimits() {
        while (haslimits())
            removelimitsAt(0);
    }

    public void addlimits(limitsType value) {
        appendDomElement("http://www.collada.org/2005/11/COLLADASchema",
                "limits", value);
    }

    public void insertlimitsAt(limitsType value, int index) {
        insertDomElementAt("http://www.collada.org/2005/11/COLLADASchema",
                "limits", index, value);
    }

    public void replacelimitsAt(limitsType value, int index) {
        replaceDomElementAt("http://www.collada.org/2005/11/COLLADASchema",
                "limits", index, value);
    }

    public static int getspringMinCount() {
        return 0;
    }

    public static int getspringMaxCount() {
        return 1;
    }

    public int getspringCount() {
        return getDomChildCount(Element,
                "http://www.collada.org/2005/11/COLLADASchema", "spring");
    }

    public boolean hasspring() {
        return hasDomChild(Element,
                "http://www.collada.org/2005/11/COLLADASchema", "spring");
    }

    public springType2 newspring() {
        return new springType2(domNode.getOwnerDocument().createElementNS(
                "http://www.collada.org/2005/11/COLLADASchema", "spring"));
    }

    public springType2 getspringAt(int index) throws Exception {
        return new springType2(
                dereference(getDomChildAt(Element,
                        "http://www.collada.org/2005/11/COLLADASchema",
                        "spring", index)));
    }

    public org.w3c.dom.Node getStartingspringCursor() throws Exception {
        return getDomFirstChild(Element,
                "http://www.collada.org/2005/11/COLLADASchema", "spring");
    }

    public org.w3c.dom.Node getAdvancedspringCursor(org.w3c.dom.Node curNode)
            throws Exception {
        return getDomNextChild(Element,
                "http://www.collada.org/2005/11/COLLADASchema", "spring",
                curNode);
    }

    public springType2 getspringValueAtCursor(org.w3c.dom.Node curNode)
            throws Exception {
        if (curNode == null)
            throw new com.jmex.model.collada.xml.XmlException("Out of range");
        else
            return new springType2(dereference(curNode));
    }

    public springType2 getspring() throws Exception {
        return getspringAt(0);
    }

    public void removespringAt(int index) {
        removeDomChildAt(Element,
                "http://www.collada.org/2005/11/COLLADASchema", "spring", index);
    }

    public void removespring() {
        while (hasspring())
            removespringAt(0);
    }

    public void addspring(springType2 value) {
        appendDomElement("http://www.collada.org/2005/11/COLLADASchema",
                "spring", value);
    }

    public void insertspringAt(springType2 value, int index) {
        insertDomElementAt("http://www.collada.org/2005/11/COLLADASchema",
                "spring", index, value);
    }

    public void replacespringAt(springType2 value, int index) {
        replaceDomElementAt("http://www.collada.org/2005/11/COLLADASchema",
                "spring", index, value);
    }

    private org.w3c.dom.Node dereference(org.w3c.dom.Node node) {
        return node;
    }
}
