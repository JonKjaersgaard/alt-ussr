/**
 * technique_commonType2.java This file was generated by XMLSpy 2006sp2
 * Enterprise Edition. YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION. Refer to the XMLSpy
 * Documentation for further details. http://www.altova.com/xmlspy
 */

package com.jmex.model.collada.schema;

public class technique_commonType2 extends com.jmex.model.collada.xml.Node {

    private static final long serialVersionUID = 1L;

    public technique_commonType2(technique_commonType2 node) {
        super(node);
    }

    public technique_commonType2(org.w3c.dom.Node node) {
        super(node);
    }

    public technique_commonType2(org.w3c.dom.Document doc) {
        super(doc);
    }

    public technique_commonType2(com.jmex.model.collada.xml.Document doc,
            String namespaceURI, String prefix, String name) {
        super(doc, namespaceURI, prefix, name);
    }

    public void adjustPrefix() {
        for (org.w3c.dom.Node tmpNode = getDomFirstChild(Element,
                "http://www.collada.org/2005/11/COLLADASchema", "orthographic"); tmpNode != null; tmpNode = getDomNextChild(
                Element, "http://www.collada.org/2005/11/COLLADASchema",
                "orthographic", tmpNode)) {
            internalAdjustPrefix(tmpNode, true);
            new orthographicType(tmpNode).adjustPrefix();
        }
        for (org.w3c.dom.Node tmpNode = getDomFirstChild(Element,
                "http://www.collada.org/2005/11/COLLADASchema", "perspective"); tmpNode != null; tmpNode = getDomNextChild(
                Element, "http://www.collada.org/2005/11/COLLADASchema",
                "perspective", tmpNode)) {
            internalAdjustPrefix(tmpNode, true);
            new perspectiveType(tmpNode).adjustPrefix();
        }
    }

    public static int getorthographicMinCount() {
        return 1;
    }

    public static int getorthographicMaxCount() {
        return 1;
    }

    public int getorthographicCount() {
        return getDomChildCount(Element,
                "http://www.collada.org/2005/11/COLLADASchema", "orthographic");
    }

    public boolean hasorthographic() {
        return hasDomChild(Element,
                "http://www.collada.org/2005/11/COLLADASchema", "orthographic");
    }

    public orthographicType neworthographic() {
        return new orthographicType(domNode.getOwnerDocument().createElementNS(
                "http://www.collada.org/2005/11/COLLADASchema", "orthographic"));
    }

    public orthographicType getorthographicAt(int index) throws Exception {
        return new orthographicType(dereference(getDomChildAt(Element,
                "http://www.collada.org/2005/11/COLLADASchema", "orthographic",
                index)));
    }

    public org.w3c.dom.Node getStartingorthographicCursor() throws Exception {
        return getDomFirstChild(Element,
                "http://www.collada.org/2005/11/COLLADASchema", "orthographic");
    }

    public org.w3c.dom.Node getAdvancedorthographicCursor(
            org.w3c.dom.Node curNode) throws Exception {
        return getDomNextChild(Element,
                "http://www.collada.org/2005/11/COLLADASchema", "orthographic",
                curNode);
    }

    public orthographicType getorthographicValueAtCursor(
            org.w3c.dom.Node curNode) throws Exception {
        if (curNode == null)
            throw new com.jmex.model.collada.xml.XmlException("Out of range");
        else
            return new orthographicType(dereference(curNode));
    }

    public orthographicType getorthographic() throws Exception {
        return getorthographicAt(0);
    }

    public void removeorthographicAt(int index) {
        removeDomChildAt(Element,
                "http://www.collada.org/2005/11/COLLADASchema", "orthographic",
                index);
    }

    public void removeorthographic() {
        while (hasorthographic())
            removeorthographicAt(0);
    }

    public void addorthographic(orthographicType value) {
        appendDomElement("http://www.collada.org/2005/11/COLLADASchema",
                "orthographic", value);
    }

    public void insertorthographicAt(orthographicType value, int index) {
        insertDomElementAt("http://www.collada.org/2005/11/COLLADASchema",
                "orthographic", index, value);
    }

    public void replaceorthographicAt(orthographicType value, int index) {
        replaceDomElementAt("http://www.collada.org/2005/11/COLLADASchema",
                "orthographic", index, value);
    }

    public static int getperspectiveMinCount() {
        return 1;
    }

    public static int getperspectiveMaxCount() {
        return 1;
    }

    public int getperspectiveCount() {
        return getDomChildCount(Element,
                "http://www.collada.org/2005/11/COLLADASchema", "perspective");
    }

    public boolean hasperspective() {
        return hasDomChild(Element,
                "http://www.collada.org/2005/11/COLLADASchema", "perspective");
    }

    public perspectiveType newperspective() {
        return new perspectiveType(domNode.getOwnerDocument().createElementNS(
                "http://www.collada.org/2005/11/COLLADASchema", "perspective"));
    }

    public perspectiveType getperspectiveAt(int index) throws Exception {
        return new perspectiveType(dereference(getDomChildAt(Element,
                "http://www.collada.org/2005/11/COLLADASchema", "perspective",
                index)));
    }

    public org.w3c.dom.Node getStartingperspectiveCursor() throws Exception {
        return getDomFirstChild(Element,
                "http://www.collada.org/2005/11/COLLADASchema", "perspective");
    }

    public org.w3c.dom.Node getAdvancedperspectiveCursor(
            org.w3c.dom.Node curNode) throws Exception {
        return getDomNextChild(Element,
                "http://www.collada.org/2005/11/COLLADASchema", "perspective",
                curNode);
    }

    public perspectiveType getperspectiveValueAtCursor(org.w3c.dom.Node curNode)
            throws Exception {
        if (curNode == null)
            throw new com.jmex.model.collada.xml.XmlException("Out of range");
        else
            return new perspectiveType(dereference(curNode));
    }

    public perspectiveType getperspective() throws Exception {
        return getperspectiveAt(0);
    }

    public void removeperspectiveAt(int index) {
        removeDomChildAt(Element,
                "http://www.collada.org/2005/11/COLLADASchema", "perspective",
                index);
    }

    public void removeperspective() {
        while (hasperspective())
            removeperspectiveAt(0);
    }

    public void addperspective(perspectiveType value) {
        appendDomElement("http://www.collada.org/2005/11/COLLADASchema",
                "perspective", value);
    }

    public void insertperspectiveAt(perspectiveType value, int index) {
        insertDomElementAt("http://www.collada.org/2005/11/COLLADASchema",
                "perspective", index, value);
    }

    public void replaceperspectiveAt(perspectiveType value, int index) {
        replaceDomElementAt("http://www.collada.org/2005/11/COLLADASchema",
                "perspective", index, value);
    }

    private org.w3c.dom.Node dereference(org.w3c.dom.Node node) {
        return node;
    }
}
