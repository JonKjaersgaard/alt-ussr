/**
 * technique_hintType.java This file was generated by XMLSpy 2006sp2 Enterprise
 * Edition. YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE OVERWRITTEN WHEN
 * YOU RE-RUN CODE GENERATION. Refer to the XMLSpy Documentation for further
 * details. http://www.altova.com/xmlspy
 */

package com.jmex.model.collada.schema;

import com.jmex.model.collada.types.SchemaNCName;

public class technique_hintType extends com.jmex.model.collada.xml.Node {

    private static final long serialVersionUID = 1L;

    public technique_hintType(technique_hintType node) {
        super(node);
    }

    public technique_hintType(org.w3c.dom.Node node) {
        super(node);
    }

    public technique_hintType(org.w3c.dom.Document doc) {
        super(doc);
    }

    public technique_hintType(com.jmex.model.collada.xml.Document doc,
            String namespaceURI, String prefix, String name) {
        super(doc, namespaceURI, prefix, name);
    }

    public void adjustPrefix() {
        for (org.w3c.dom.Node tmpNode = getDomFirstChild(Attribute, null,
                "platform"); tmpNode != null; tmpNode = getDomNextChild(
                Attribute, null, "platform", tmpNode)) {
            internalAdjustPrefix(tmpNode, false);
        }
        for (org.w3c.dom.Node tmpNode = getDomFirstChild(Attribute, null, "ref"); tmpNode != null; tmpNode = getDomNextChild(
                Attribute, null, "ref", tmpNode)) {
            internalAdjustPrefix(tmpNode, false);
        }
    }

    public static int getplatformMinCount() {
        return 1;
    }

    public static int getplatformMaxCount() {
        return 1;
    }

    public int getplatformCount() {
        return getDomChildCount(Attribute, null, "platform");
    }

    public boolean hasplatform() {
        return hasDomChild(Attribute, null, "platform");
    }

    public SchemaNCName newplatform() {
        return new SchemaNCName();
    }

    public SchemaNCName getplatformAt(int index) throws Exception {
        return new SchemaNCName(getDomNodeValue(dereference(getDomChildAt(
                Attribute, null, "platform", index))));
    }

    public org.w3c.dom.Node getStartingplatformCursor() throws Exception {
        return getDomFirstChild(Attribute, null, "platform");
    }

    public org.w3c.dom.Node getAdvancedplatformCursor(org.w3c.dom.Node curNode)
            throws Exception {
        return getDomNextChild(Attribute, null, "platform", curNode);
    }

    public SchemaNCName getplatformValueAtCursor(org.w3c.dom.Node curNode)
            throws Exception {
        if (curNode == null)
            throw new com.jmex.model.collada.xml.XmlException("Out of range");
        else
            return new SchemaNCName(getDomNodeValue(dereference(curNode)));
    }

    public SchemaNCName getplatform() throws Exception {
        return getplatformAt(0);
    }

    public void removeplatformAt(int index) {
        removeDomChildAt(Attribute, null, "platform", index);
    }

    public void removeplatform() {
        while (hasplatform())
            removeplatformAt(0);
    }

    public void addplatform(SchemaNCName value) {
        if (value.isNull() == false) {
            appendDomChild(Attribute, null, "platform", value.toString());
        }
    }

    public void addplatform(String value) throws Exception {
        addplatform(new SchemaNCName(value));
    }

    public void insertplatformAt(SchemaNCName value, int index) {
        insertDomChildAt(Attribute, null, "platform", index, value.toString());
    }

    public void insertplatformAt(String value, int index) throws Exception {
        insertplatformAt(new SchemaNCName(value), index);
    }

    public void replaceplatformAt(SchemaNCName value, int index) {
        replaceDomChildAt(Attribute, null, "platform", index, value.toString());
    }

    public void replaceplatformAt(String value, int index) throws Exception {
        replaceplatformAt(new SchemaNCName(value), index);
    }

    public static int getrefMinCount() {
        return 1;
    }

    public static int getrefMaxCount() {
        return 1;
    }

    public int getrefCount() {
        return getDomChildCount(Attribute, null, "ref");
    }

    public boolean hasref() {
        return hasDomChild(Attribute, null, "ref");
    }

    public SchemaNCName newref() {
        return new SchemaNCName();
    }

    public SchemaNCName getrefAt(int index) throws Exception {
        return new SchemaNCName(getDomNodeValue(dereference(getDomChildAt(
                Attribute, null, "ref", index))));
    }

    public org.w3c.dom.Node getStartingrefCursor() throws Exception {
        return getDomFirstChild(Attribute, null, "ref");
    }

    public org.w3c.dom.Node getAdvancedrefCursor(org.w3c.dom.Node curNode)
            throws Exception {
        return getDomNextChild(Attribute, null, "ref", curNode);
    }

    public SchemaNCName getrefValueAtCursor(org.w3c.dom.Node curNode)
            throws Exception {
        if (curNode == null)
            throw new com.jmex.model.collada.xml.XmlException("Out of range");
        else
            return new SchemaNCName(getDomNodeValue(dereference(curNode)));
    }

    public SchemaNCName getref() throws Exception {
        return getrefAt(0);
    }

    public void removerefAt(int index) {
        removeDomChildAt(Attribute, null, "ref", index);
    }

    public void removeref() {
        while (hasref())
            removerefAt(0);
    }

    public void addref(SchemaNCName value) {
        if (value.isNull() == false) {
            appendDomChild(Attribute, null, "ref", value.toString());
        }
    }

    public void addref(String value) throws Exception {
        addref(new SchemaNCName(value));
    }

    public void insertrefAt(SchemaNCName value, int index) {
        insertDomChildAt(Attribute, null, "ref", index, value.toString());
    }

    public void insertrefAt(String value, int index) throws Exception {
        insertrefAt(new SchemaNCName(value), index);
    }

    public void replacerefAt(SchemaNCName value, int index) {
        replaceDomChildAt(Attribute, null, "ref", index, value.toString());
    }

    public void replacerefAt(String value, int index) throws Exception {
        replacerefAt(new SchemaNCName(value), index);
    }

    private org.w3c.dom.Node dereference(org.w3c.dom.Node node) {
        return node;
    }
}
