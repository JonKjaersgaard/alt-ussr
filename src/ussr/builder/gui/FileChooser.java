package ussr.builder.gui;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JFileChooser;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

import ussr.builder.SaveLoad;
import ussr.physics.jme.JMESimulation;

/**
 *
 * @author  Konstantinas
 */
public class FileChooser extends javax.swing.JFrame {

	/**
	 * The physical simulation
	 */
	private JMESimulation simulation;

	/**
	 * The type of FileChoose. For example true if it is open dialog and false if it is save dialog 
	 */
	private boolean type;


	/** Creates new form FileChooser */
	public FileChooser( JMESimulation simulation, boolean type) {
		this.simulation = simulation;
		this.type = type;
		initComponents(); 
		changeOpenSaveDialog(type);
		changeToSetLookAndFeel();
	}
	private void changeToSetLookAndFeel(){
		try {
			UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
			SwingUtilities.updateComponentTreeUI(this);
		} catch (ClassNotFoundException ex) {
			Logger.getLogger(FileChooser.class.getName()).log(Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			Logger.getLogger(FileChooser.class.getName()).log(Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			Logger.getLogger(FileChooser.class.getName()).log(Level.SEVERE, null, ex);
		} catch (UnsupportedLookAndFeelException ex) {
			Logger.getLogger(FileChooser.class.getName()).log(Level.SEVERE, null, ex);
		}
	}    

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		jFileChooser1 = new javax.swing.JFileChooser();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		setTitle("File chooser");

		jFileChooser1.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
		jFileChooser1.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jFileChooser1ActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
						.addComponent(jFileChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addContainerGap(92, Short.MAX_VALUE))
		);
		layout.setVerticalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
						.addComponent(jFileChooser1, javax.swing.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE)
						.addContainerGap())
		);

		jFileChooser1.setAcceptAllFileFilterUsed(false);
		jFileChooser1.setFileFilter(new FileFilter (".xml"));

		pack();
	}// </editor-fold>

	private void jFileChooser1ActionPerformed(java.awt.event.ActionEvent evt) {                                              

		String command = evt.getActionCommand();//Selected button command

		if(command.equalsIgnoreCase("ApproveSelection") && this.type == false){//Save dialog
			//System.out.println("Save pressed"); //For debugging        
			String fileDiretoryName = jFileChooser1.getSelectedFile().toString();
			//System.out.println("fileDiretoryName:"+fileDiretoryName); //For debugging     
			SaveLoad saveLoad = new SaveLoad(simulation);
			saveLoad.saveXMLfile(fileDiretoryName);

			this.setVisible(false);        
		}else if(command.equalsIgnoreCase("ApproveSelection") && this.type == true ){//Open dialog
			//System.out.println("Open pressed");//For debugging        
			String fileDiretoryName = jFileChooser1.getSelectedFile().toString();
			//System.out.println("fileDiretoryName:"+fileDiretoryName); //For debugging     
			SaveLoad saveLoad = new SaveLoad(simulation);
			saveLoad.loadXMLfile(fileDiretoryName);

			this.setVisible(false);        
		}else if (command.equalsIgnoreCase("CancelSelection")){
			//System.out.println("Cancel pressed");//For debugging
			this.setVisible(false);
		}
	}

	private void changeOpenSaveDialog(boolean type){
		if (type){
			jFileChooser1.setDialogType(javax.swing.JFileChooser.OPEN_DIALOG);
		}else {
			jFileChooser1.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
		}

	}

	/*    *//**
	 * @param args the command line arguments
	 *//*
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FileChooser().setVisible(true);
            }
        });
    }*/
	public void activate(){
		java.awt.EventQueue.invokeLater(new Runnable(){
			public void run() {
				new FileChooser(simulation, type).setVisible(true);
			}
		});

	}

	// Variables declaration - do not modify
	private javax.swing.JFileChooser jFileChooser1;
	// End of variables declaration

}
